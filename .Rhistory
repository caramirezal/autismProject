plot(mtcars$hp[names(p)],p)
names(p)
plot(mtcars$hp,p)
with(mtcars,plot(mpg,hp))
plot(mtcars$hp,p)
with(mtcars,plot(mpg,hp))
lines(mtcars$hp,p)
with(mtcars,plot(hp,mpg))
lines(mtcars$hp,p)
fit
fit$coefficients
fit$residuals
fit$rank
fit$coefficients
fit$residuals
fit$effects
fit$rank
fit$assign
fit$qr
fit$df.residual
fit$xlevels
fit$call
fit$terms
fit$model
summary(fit)
s<- summary(fit)
s$fstatistic
s$r.squared
s$coefficients
s$coefficients[4,4]
s$coefficients[2,4]
p <- ggplot(mtcars, aes(x=hp,y=mpg))
p <- p + geom_smooth()
plot(p)
p <- p + geom_smooth(method = "m")
p <- p + geom_smooth(method = "lm")
plot(p)
p <- ggplot(mtcars, aes(x=hp,y=mpg))
p <- p + geom_smooth(method = "lm")
plot(p)
p <- p + geom_point()
plot(p)
predict(fit,newdata = data.frame(111))
predict(fit,newdata = data.frame(hp=111))
head(mtcars)
library(reshape2)
m <- melt(mtcars)
head(m)
ggplot(m, aes(x=value,factor=as.factor(variable))) + geom_line()
fit <- lm(sheight ~ fheight,data=father.son)
summary(fit)$sigma
summary(fit)$r.squared
summary(fit)
fit
fit$fitted.values
x <- father.son$fheight
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
fit <- lm(sheight ~fheight, data=father.son)
with(father.son,plot(fheight,sheight))
l <- predict(fit)
with(father.son,lines(fheight,l))
predict(fit,interval = "confidence" )
con <- predict(fit,interval = "confidence" )
lines(fheight,con[,"upr"],col="red")
lines(father.son$fheight,con[,"upr"],col="red")
lines(father.son$fheight,con[,"lwr"],col="red")
confint(fit)
## Q1
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
residuals(fit)
residuals(fit)$sigma
summary(fit)$sigma
head(ntcars)
head(mtcars)
fit <- with(mtcars,lm(wt,mpg))
fit <- with(mtcars,lm(wt~mpg))
fit <- with(mtcars,lm(mpg~wt))
confint(fit)
?mtcars
summary(fit)
s <- summary(fit)
s$coefficients
fit$model
fit$qr
fit$xlevels
s$coefficients
p <- predict(fit, newdata = data.frame(300))
p <- predict(fit, newdata = data.frame(wt=300))
p
p
con <- confint(fit)
con
p <- predict(fit)
p
fit$coefficients
fit$residuals
fit$effects
fit$rank
fit$fitted.values
fit$assign
fit$qr
fit$df.residual
fit$model
fit$terms
fit$call
fit$xlevels
p
confint.lm(fit)
p <- predict(fit,interval = "confidence",newdata = data.frame(wt=3000))
p
p <- predict(fit,interval = "confidence",newdata = data.frame(wt=3))
p
p <- predict(fit,interval = "confidence",newdata = data.frame(wt=3),0.025)
p
p <- predict(fit,interval = "confidence",newdata = data.frame(wt=3),0.05)
p
p <- predict(fit,interval = "confidence",newdata = data.frame(wt=3),level = 0.025)
p
p <- predict(fit,interval = "prediction",newdata = data.frame(wt=3),level = 0.025)
p
p <- predict(fit,interval = "prediction",newdata = data.frame(wt=3),level = 0.05)
p
p <- predict(fit,interval = "prediction",newdata = data.frame(wt=3),level = 0.025)
p
p <- predict(fit,interval = "prediction",newdata = data.frame(wt=3))
p
fit <- with(mtcars,lm(mpg~wt))
fit <- with(mtcars,lm(mpg~I(wt)*2))
fit <- with(mtcars,lm(mpg~I(wt*2)))
p <- predict(fit,interval = "prediction")
p
confint(fit)
fit$coefficients
fit$coefficients[2] + confint(fit)[2,1]
summary(fit)$coefficients
fit$coefficients[2] + c(-1,1)*qt(0.975,df=fit$df )*summary(fit)$coefficients[1,2]
fit$df
fit$coefficients[2] + c(-1,1)*qt(0.975,df=fit$df )*summary(fit)$coefficients[2,2]
fit <- with(mtcars,lm(mpg~wt))
fit$coefficients[2] + c(-1,1)*qt(0.975,df=fit$df )*summary(fit)$coefficients[2,2]*2
fit$coefficients[2] + c(-1,1)*qt(0.975,df=fit$df )*summary(fit)$coefficients[2,2]*0.5
fit$coefficients[2] + c(-1,1)*qt(0.95,df=fit$df )*summary(fit)$coefficients[2,2]*0.5
fit$coefficients[2] + c(-1,1)*qt(0.95,df=fit$df )*summary(fit)$coefficients[2,2]*2
fit$coefficients[2] + c(-1,1)*qt(0.95,df=fit$df )*summary(fit)$coefficients[2,2]*0.5
fit$coefficients[2] + c(-1,1)*qt(0.975,df=fit$df )*summary(fit)$coefficients[2,2]*0.5
summary(fit)$coefficients
confint(fit)
confint(fit)*2
x <- mtcars$wt
y <- mtcars$mpg
fit
summary(fit)
1/0.07528
data(mtcars)
head(mtcars)
fit <- lm(mpg~wt,data = mtcars)
summary(fit)
confint(fit)
predict(fit,interval = "prediction")
?predict
?predict.lm
predict(fit, interval = "prediction",newdata = data.frame(wt=mean(mtcars$wt)))
predict(fit, interval = "confidence",newdata = data.frame(wt=mean(mtcars$wt)))
fit
summary(fit)
sqrt(0.7528)
0.7528^2
sqrt(0.7446)
0.7446^2
fit$fitted.values
x <- mtcars$wt
y <- mtcars$mpg
sum((y - fit$fitted.values))/ sum((y - mean(y)))
s <- sum((y - fit$fitted.values))/ sum((y - mean(y)^2))
s
s <- sum((y - fit$fitted.values))/ sum((y - mean(y))^2)
s
s <- sum((y - fit$fitted.values)^2) / sum((y - mean(y))^2)
s
data("Seatbelts")
Seatbelts.df <- Seatbelts
Seatbelts.df <- as.data.frame(Seatbelts)
head(Seatbelts.df)
fit <- lm(DriversKilled~kms + PetrolPrice)
fit <- lm(DriversKilled~kms + PetrolPrice,data=Seatbelts.df)
summary(fit)
predict(fit, newdata = as.data.frame(kms=mean(Seatbelts.df$kms,PetrolPrice=Seatbelts.df$PetrolPrice)))
predict(fit, newdata = as.data.frame(kms=mean(Seatbelts.df$kms,PetrolPrice=mean(Seatbelts.df$PetrolPrice))))
predict(fit, newdata = as.data.frame(kms=mean(Seatbelts.df$kms),PetrolPrice=mean(Seatbelts.df$PetrolPrice)) )
data("mtcars")
head(mtcars)
plot(mtcars)
n <- 100
plot(c(1, n), 0 : 1, type = "n", frame = FALSE, xlab = "p", ylab = "R^2")
y <- rnorm(n); x <- NULL; r <- NULL
for (i in 1 : n){
x <- cbind(x, rnorm(n))
r <- c(r, summary(lm(y ~ x))$r.squared)
}
lines(1 : n, r, lwd = 3)
abline(h = 1)
n <- 100
plot(c(1, n), 0 : 1, type = "n", frame = FALSE, xlab = "p", ylab = "R^2")
y <- rnorm(n); x <- NULL; r <- NULL
for (i in 1 : n){
x <- cbind(x, rnorm(n))
r <- c(r, summary(lm(y ~ x))$adj.r.squared)
}
lines(1 : n, r, lwd = 3)
abline(h = 1)
install.packages("plotly")
install.packages("car")
head(mtcars)
library(cars)
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
install.packages("rgl")
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
library(rgl)
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
library(rgl)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
install.packages(c("boot", "desc", "devtools", "knitr", "reshape", "rlang", "rsconnect", "tibble"))
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
install.packages("rgl")
install.packages("rgl")
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
install.packages("rglwidget")
install.packages("rglwidget")
install.packages("rgl")
update.packages(checkBuilt = TRUE)
data("mtcars")
head(mtcars)
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
install.packages("rgl")
install.packages("rgl")
fit <- lm(mpg~wt,data = mtcars)
coef(fit)
coef(fit)[2]
fit <- lm(mpg~wt+cyl,data = mtcars)
coef(fit)
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
library(car)
data("mtcars")
head(mtcars)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
## Dependencia
library(car)
## PROBLEMAS DE INSTALACIÃ“N:
## Loading required namespace: rgl
## Error in rgl.clear(type, subscene = subscene) :
##        object 'rgl_clear' not found
data("mtcars")
head(mtcars)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
library(rgl)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
update.packages(checkBuilt = TRUE)
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
install.packages("rglwidget")
install.packages("car")
install.packages("car")
library(car)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
scatter3d(x = mtcars$cyl,y = mtcars$wt,z = mtcars$mpg)
# Recipe for proyecting data on PC
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
plot(g)
# Recipe for proyecting data on PC
library(ggplot2)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
plot(g)
library(devtools)
install_github("vqv/ggbiplot")
# Recipe for proyecting data on PC
library(ggplot2)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
plot(g)
# Recipe for proyecting data on PC
library(ggplot2)
library(ggbiplot)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
plot(g)
head(InsectSprays)
library(plotFun)
mhist
g <- ggplot(InsectSprays, aes(count),fil=as.factor(spray))
g <- g + geom_density()
g
g <- ggplot(InsectSprays, aes(count),fill=as.factor(spray))
g <- g + geom_density()
g
str(InsectSprays)
g <- ggplot(InsectSprays, aes(countfill=spray)
)
g <- g + geom_density()
g
g <- ggplot(InsectSprays, aes(count, fill=as.factor(spray)) )
g <- g + geom_density()
g
g <- g + geom_density(alpha=0.5)
g
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
p <- 0
for (i in 1:length(x)) {
p <- p + x[i]*w[i]
}
p
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
p <- 0
for (i in 1:length(x)) {
p <- p + x[i]*w[i]
cat(p)
}
p
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
p <- 0
for (i in 1:length(x)) {
p <- p + x[i]*w[i]
}
p
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
m <- c(0.3,.0025,1.077,.1471)
for (j in 1:length(m)) {
p <- 0
for (i in 1:length(x)) {
p <- p + w[i]*(x[i]-m[j])
}
cat("m: ",m[j]," p: ",p,"\n")
}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
m <- c(0.3,.0025,1.077,.1471)
for (j in 1:length(m)) {
p <- 0
for (i in 1:length(x)) {
p <- p + w[i]*(x[i]-m[j])^2
}
cat("m: ",m[j]," p: ",p,"\n")
}
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = as.data.frame(wt= mean(mtcars$wt)))
predict(fit, newdata = data.frame(wt= mean(mtcars$wt)))
predict(fit, newdata = data.frame(wt= mean(mtcars$wt)),interval = "confidence")
summary(fit)
x <- mtcars$wt
y <- mtcars$mpg
s <- sum((y - fit$fitted.values)^2) / sum((y - mean(y))^2)
s
library(beadarraySNP)
?reportGenomeIntensityPlot
readLines("scripts/ensambleDeSequenciasFastq/alignments/sorted_output.bed",n=10)
q()
setwd("~/scripts/autismProject")
datadir <- system.file("testdata", package="beadarraySNP")
datadir
readLines(datadir,n = 10)
readLines(datadir,n = 10)
readLines(paste(datadir,"4samples_opa4.csv",sep="/"),n=10)
datadir <- system.file("testdata", package="beadarraySNP")
datadir <- paste(datadir,"4samples_opa4.csv",sep="/")
library(beadarraySNP)
datadir <- system.file("testdata", package="beadarraySNP")
datasheet <- paste(datadir,"4samples_opa4.csv",sep="/")
SNPData <- read.SnpSetIllumina(datasheet,datadir)
SNPData
showMethods(SNPData)
slotNames(SNPData)
assayData(SNPData)
head(assayData(SNPData))
names(assayData(SNPData))
head(assayData(SNPData)$G)
slotNames(SNPData)
pathOpa <- "~/dataBases/GoldenGate_U15_025 AT/GenomeStudio/GS0014416-OPA.opa"
readLines(pathOpa,n = 13)
pathSampleSheet <- "~/dataBases/GoldenGate_U15_025 AT/GenomeStudio/SampleSheet_ID.csv"
readLines(pathSampleSheet,n=13)
library(beadarraySNP)
## rutas a archivos locales
path2SampleMap <- "~/scripts/autismProject/data/Sample_Map.txt"
path2report <- "~/scripts/autismProject/data/autism_FinalReport.txt"
## Cargando datos
SNPData <- read.SnpSetIllumina(Sample_Map2Samplesheet(path2SampleMap),
reportfile = path2report)
library(beadarraySNP)
datadir <- system.file("testdata", package="beadarraySNP")
datasheet <- paste(datadir,"4samples_opa4.csv",sep="/")
SNPData.t
SNPData.t <- read.SnpSetIllumina(datasheet,datadir)
SNPData.t
slotNames(SNPData)
?read.SnpSetIllumina
GetBeadStudioSampleNames(SNPData)
BeadstudioQC(SNPData)
slotNames(SNPData)
str(assayData(SNPData)
)
lapply(assayData(SNPData),names)
names(assayData(SNPData))
assayData(SNPData)$Theta
str(assayData(SNPData))
names(assayData(SNPData))
head(assayData(SNPData)$call)
assayData(SNPData)$call[1:5,1:5]
assayData(SNPData)$call[1:4,1:5]
assayData(SNPData)$call[1:3,1:5]
assayData(SNPData)$call[1:3,1:5]
assayData(SNPData)$G[1:3,1:5]
assayData(SNPData)$R[1:3,1:5]
assayData(SNPData)$Theta[1:3,1:5]
heatmap(assayData(SNPData$Theta))
heatmap(assayData(SNPData)$Theta)
heatmap(assayData(SNPData)$Theta)
heatmap(assayData(SNPData)$Theta)
heatmap(assayData(SNPData)$Theta,Colv = NA)
heatmap(assayData(SNPData)$Theta,Rowv =  = NA)
heatmap(assayData(SNPData)$Theta,Rowv = NA)
heatmap(assayData(SNPData)$Theta)
SNPData.t
assayData(SNPData.t)$call
head(assayData(SNPData.t)$call)
head(assayData(SNPData.t)$callPorbability)
head(assayData(SNPData.t)$callProbability)
head(assayData(SNPData.t)$X)
names(assayData(SNPData.t))
head(assayData(SNPData)$call)
slotNames(SNPData.t)
head(assayData(SNPData.t)$call)
slotNames(SNPData.t)
head(assayData(SNPData.t)$call)
names(assayData(SNPData.t))
assayData(SNPData)$callProbability[1:4,1:4]
head(assayData(SNPData.t)$G)
pData(SNPData.t)
pData(SNPData)[,1:4]
pData(SNPData)[1:4,]
pData(SNPData.t)
SNPData
exprs(SNPData)
head(exprs(SNPData))
exprs(SNPData)[1:4,1:4]
